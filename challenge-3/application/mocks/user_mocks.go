// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	user "secure/challenge-3/domain/user"

	mock "github.com/stretchr/testify/mock"
)

// UserMocks is an autogenerated mock type for the UserMocks type
type UserMocks struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *UserMocks) Create(_a0 *user.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*user.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *UserMocks) Delete(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *UserMocks) Get(_a0 int) (*user.User, error) {
	ret := _m.Called(_a0)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*user.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *user.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *UserMocks) GetAll() ([]*user.User, error) {
	ret := _m.Called()

	var r0 []*user.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*user.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*user.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0
func (_m *UserMocks) GetByID(_a0 int) (*user.User, error) {
	ret := _m.Called(_a0)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*user.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *user.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByMap provides a mock function with given fields: _a0
func (_m *UserMocks) GetByMap(_a0 map[string]interface{}) map[string]interface{} {
	ret := _m.Called(_a0)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *UserMocks) Update(_a0 int, _a1 map[string]interface{}) (*user.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, map[string]interface{}) (*user.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, map[string]interface{}) *user.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, map[string]interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserMocks interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserMocks creates a new instance of UserMocks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserMocks(t mockConstructorTestingTNewUserMocks) *UserMocks {
	mock := &UserMocks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
