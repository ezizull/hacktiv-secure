// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	book "secure/challenge-3/domain/book"

	mock "github.com/stretchr/testify/mock"

	postgresbook "secure/challenge-3/infrastructure/repository/postgres/book"
)

// BookTesting is an autogenerated mock type for the BookTesting type
type BookTesting struct {
	mock.Mock
}

// Create provides a mock function with given fields: newBook
func (_m *BookTesting) Create(newBook *book.Book) (*book.Book, error) {
	ret := _m.Called(newBook)

	var r0 *book.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(*book.Book) (*book.Book, error)); ok {
		return rf(newBook)
	}
	if rf, ok := ret.Get(0).(func(*book.Book) *book.Book); ok {
		r0 = rf(newBook)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*book.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(*book.Book) error); ok {
		r1 = rf(newBook)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *BookTesting) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: page, limit
func (_m *BookTesting) GetAll(page int64, limit int64) (*postgresbook.PaginationResultBook, error) {
	ret := _m.Called(page, limit)

	var r0 *postgresbook.PaginationResultBook
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*postgresbook.PaginationResultBook, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *postgresbook.PaginationResultBook); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postgresbook.PaginationResultBook)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *BookTesting) GetByID(id int) (*book.Book, error) {
	ret := _m.Called(id)

	var r0 *book.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*book.Book, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *book.Book); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*book.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneByMap provides a mock function with given fields: bookMap
func (_m *BookTesting) GetOneByMap(bookMap map[string]interface{}) (*book.Book, error) {
	ret := _m.Called(bookMap)

	var r0 *book.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (*book.Book, error)); ok {
		return rf(bookMap)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) *book.Book); ok {
		r0 = rf(bookMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*book.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(bookMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, bookMap
func (_m *BookTesting) Update(id uint, bookMap map[string]interface{}) (*book.Book, error) {
	ret := _m.Called(id, bookMap)

	var r0 *book.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, map[string]interface{}) (*book.Book, error)); ok {
		return rf(id, bookMap)
	}
	if rf, ok := ret.Get(0).(func(uint, map[string]interface{}) *book.Book); ok {
		r0 = rf(id, bookMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*book.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, map[string]interface{}) error); ok {
		r1 = rf(id, bookMap)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGetAll provides a mock function with given fields: page, userId, limit
func (_m *BookTesting) UserGetAll(page int64, userId int, limit int64) (*postgresbook.PaginationResultBook, error) {
	ret := _m.Called(page, userId, limit)

	var r0 *postgresbook.PaginationResultBook
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int, int64) (*postgresbook.PaginationResultBook, error)); ok {
		return rf(page, userId, limit)
	}
	if rf, ok := ret.Get(0).(func(int64, int, int64) *postgresbook.PaginationResultBook); ok {
		r0 = rf(page, userId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postgresbook.PaginationResultBook)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int, int64) error); ok {
		r1 = rf(page, userId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGetByID provides a mock function with given fields: id, userId
func (_m *BookTesting) UserGetByID(id int, userId int) (*book.Book, error) {
	ret := _m.Called(id, userId)

	var r0 *book.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*book.Book, error)); ok {
		return rf(id, userId)
	}
	if rf, ok := ret.Get(0).(func(int, int) *book.Book); ok {
		r0 = rf(id, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*book.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookTesting interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookTesting creates a new instance of BookTesting. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookTesting(t mockConstructorTestingTNewBookTesting) *BookTesting {
	mock := &BookTesting{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
